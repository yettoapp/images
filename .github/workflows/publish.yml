name: Build Docker image

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io

permissions:
  id-token: write
  contents: read
  packages: write
  attestations: write

jobs:
  prepare-builds:
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest

    outputs:
      build_matrix: ${{ steps.check-success.outputs.changed_dockerfiles }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get changed Dockerfiles
        id: changed-dockerfiles
        uses: tj-actions/changed-files@v44
        with:
          files_yaml: |
            dockerfiles:
              - 'Dockerfile'

      - name: Modify any changed Dockerfiles
        id: check-success
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-dockerfiles.outputs.all_changed_files }}
        run: |
          # Convert ALL_CHANGED_FILES to an array
          IFS=$'\n' read -r -d '' -a files <<< "$ALL_CHANGED_FILES"
          # Iterate over each item in the array and replace / with -
          json_array=$(jq -n '[]')
          for file in "${files[@]}"; do
            image_name="${file//\//-}"
            json_array=$(echo "$json_array" | jq --arg dockerfile "$file" --arg image_name "$image_name" '. += [{"dockerfile": $dockerfile, "image_name": $image_name}]')
          done
          # Save the JSON array to GITHUB_OUTPUT
          echo "changed_dockerfiles=$json_array" >> $GITHUB_OUTPUT

  run-matrix:
    needs: prepare-builds
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.prepare-builds.outputs.build_matrix) }}
    steps:
      - run: echo ${{matrix.image_name}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/yettoapp/${{ matrix.image_name }}
          tags: |
            type=raw,value={{branch}}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ matrix.image_name }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
