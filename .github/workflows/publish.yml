name: Build Docker image

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io

permissions:
  id-token: write
  contents: read
  packages: write
  attestations: write

jobs:
  prepare-build:
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest

    outputs:
      build_matrix: ${{ steps.check-success.outputs.changed_dockerfiles }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get changed Dockerfiles
        id: changed-dockerfiles
        uses: tj-actions/changed-files@v45
        with:
          files: |
            **/Dockerfile

      - name: Modify any changed Dockerfiles
        id: check-success
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-dockerfiles.outputs.all_changed_files }}
        shell: python
        run: |
          import os
          import json

          all_changed_files = os.getenv('ALL_CHANGED_FILES', '[]')

          if not all_changed_files:
              # If ALL_CHANGED_FILES is empty, set an empty JSON array to GITHUB_OUTPUT
              output = {"changed_dockerfiles": []}
          else:
              # Convert ALL_CHANGED_FILES to a list
              files = all_changed_files.split('\n')
              # Iterate over each item in the list and replace / with -
              changed_dockerfiles = []
              for file in files:
                  # Remove the trailing '-Dockerfile' suffix
                  image_name = file.replace('/', '-')[:-11]
                  changed_dockerfiles.append({"dockerfile": file, "image_name": image_name})
              # Create the output dictionary
              output = {"changed_dockerfiles": changed_dockerfiles}

          # Save the JSON array to GITHUB_OUTPUT
          with open(os.getenv('GITHUB_OUTPUT'), 'a') as f:
              f.write(f"changed_dockerfiles={json.dumps(output['changed_dockerfiles'])}\n")
  run-matrix:
    needs: prepare-build
    runs-on: ubuntu-latest
    if: ${{ always() && needs.prepare-build.outputs.build_matrix != '[]' }}
    strategy:
      matrix: ${{ fromJson(needs.prepare-build.outputs.build_matrix) }}
    steps:
      - run: echo ${{matrix.image_name}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/yettoapp/${{ matrix.image_name }}
          tags: |
            type=raw,value={{branch}}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ matrix.image_name }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
