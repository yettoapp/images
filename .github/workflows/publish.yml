name: Build Docker image

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io

permissions:
  id-token: write
  contents: read
  packages: write
  attestations: write

jobs:
  prepare:
    runs-on: ubuntu-latest

    outputs:
      matrix: ${{ steps.changed-dockerfiles.outputs.all_changed_files }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get changed Dockerfiles
        id: changed-dockerfiles
        uses: tj-actions/changed-files@v44
        with:
          files: |
            **/Dockerfile
          matrix: true

      - name: List all changed files
        run: echo '${{ steps.changed-dockerfiles.outputs.all_changed_files }}'

  run-matrix:
    needs: prepare
    if: ${{ needs.prepare.outputs.matrix != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dockerfile: ${{ fromJSON(needs.prepare.outputs.matrix) }}
      max-parallel: 4
      fail-fast: false
    steps:
      - name: Set image_name variable
        run: |
          image_name="${{ matrix.dockerfile }}"
          image_name="${image_name//\//-}"
          image_name="yettoapp/${image_name%-Dockerfile}"
          echo "image_name=$image_name" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.image_name }}
          tags: |
            type=raw,value={{branch}}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.image_name }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
